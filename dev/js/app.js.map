{"version":3,"sources":["app.js"],"names":[],"mappingsfile":"app.js","sourcesContent":["/**\n * Модуль imageHandling\n * Загружает картинку и вотермарк, обеспечивает перемещение вотермарка с помощью\n * 9-позиционного блока кнопок и инпутов с координатами \"х\" и \"у\".\n * Используется плагин Jquery UI https://jqueryui.com\n * Методы: \n * imageHandling.imageLoad(imageLink, watermarkLink) - размещает 2 картинки на своих местах\n * imageHandling.onReset() - очищает все инпуты и возвращает вотермарк в исходное положение\n */\n(function() {\n    var imageHandling = {},\n        relativePos;\n  \n  publicMethod();\n  attachEvents();\n  \n  function attachEvents() {\n    /**\n     * @private\n     * Следит за событиями:\n     * 1) Нажатие на кнопки 9-позиционного блока - происходит перемещение на позицию\n     * 2) Изменение значений числовых инпутов, с помощью стелочек или вручную - \n     * происходит изменение положения вотермарка.\n     * 3) Нажатие на кнопку \"сброс\" - вотермарк и 9-поз. блок возвращаются в начальное положение,\n     * значения инпутов обнуляются.\n     */\n    $('.position__link').on('click', onChangeCorner);\n    $('#spinnerVert, #spinnerHor').on('spinstop spinchange', onChangeSpinner);\n    $('.button__reset').on('click', imageHandling.onReset);\n  }\n\n  function changeInputs(posObject) {\n    /**\n     * @private\n     * @param {object} - Положение вотермарка, поля - left и top\n     * Изменяет значения цифровых инпутов, подставляя переданные значения\n     * \n     */\n    $('#spinnerHor').val(Math.round(posObject.left));\n    $('#spinnerVert').val(Math.round(posObject.top));\n  }\n\n  function onChangeCorner(e) {\n    /**\n     * @private\n     * Изменяет положение вотермарка при нажатии на кнопки 9-поз. блока\n     * Вызывает changeInputs\n     */\n    var $this = $(this),\n        markId = $this.attr('id'),\n        markPos = markId.split('-');\n\n      e.preventDefault();\n\n      $('.position__link').removeClass('position__link_active');\n      $this.addClass('position__link_active');\n\n      $('.loaded__watermark').position({\n          of: $('.loaded__image'),\n          my: markPos[0] + ' ' + markPos[1],\n          at: markPos[0] + ' ' + markPos[1],\n          using: function(css, calc) {\n              $(this).stop(true).animate(css, 200, \"linear\");\n              changeInputs(css);\n          }\n      });\n  }\n\n  function onChangeSpinner(e, ui) {\n    /**\n     * @private\n     * @param {event} - Событие изменения значения цифрового поля\n     * @param {object} - Различная информация о состоянии цифрового поля\n     * Срабатывает при изменении значения цифрового поля.\n     * Изменяет положение вотермарка в соответствии с новыми значениями.\n     */\n    var $this = $(this),\n        value = $this.spinner('value'),\n        id = $this.attr('id'),\n        leftValue,\n        topValue;\n\n    if (~id.indexOf('Hor')) {\n      topValue = $('#spinnerVert').val();\n      leftValue = value;\n    } else {\n      leftValue = $('#spinnerHor').val();\n      topValue = value;\n    }\n\n    $('.loaded__watermark').position({\n        of: $('.loaded__image'),\n        my: 'left top',\n        at: 'left+' + leftValue + ' top+' + topValue,\n        using: function(css, calc) {\n            $(this).stop(true).animate(css, 200, \"linear\");\n        }\n    });\n  }\n\n  function changePosition(posObject) {\n    /**\n     * @private\n     * @param {object} - Положение вотермарка, поля - left и top\n     * Измениет положение вотермарка в соотествии с переданными значениями.\n     * Вызывает changeInputs()\n     */\n    $('.loaded__watermark').position({\n        of: $('.loaded__image'),\n        my: 'left top',\n        at: 'left+' + posObject.left + ' top+' + posObject.top,\n        using: function(css, calc) {\n            $(this).stop(true).animate(css, 200, \"linear\");\n            changeInputs(css);\n        }\n    });\n  }\n \n  function imageDrag() {\n    /**\n     * @private\n     * Инициализирует метод, обеспечивающий возможность перетаскивания вотермарка.\n     * Вызывает changeInputs()\n     */\n    $('.loaded__watermark').draggable({ \n        containment: \".loaded__image\",\n        stop: function( event, ui ) {\n            changeInputs(ui.position);\n        } \n    });\n  }\n\n  function initSpinner() {\n    /**\n     * @private\n     * Инициализирует цифровые инпуты. Задает мин и макс для инпутов,\n     * реализует защиту от ввода некорректных значений.\n     */\n    var cMaxX = $('.loaded__image').width(),\n        cMaxY = $('.loaded__image').height(),\n        maxX = cMaxX - $('.loaded__watermark').width(),\n        maxY = cMaxY - $('.loaded__watermark').height(),\n        max = [maxX, maxY],\n        ids = ['#spinnerHor', '#spinnerVert'];\n\n    ids.forEach(function (item, i) {\n      $(item).spinner({\n      min: 0,\n      max: max[i]\n    // Этот кусок я вам честно признаюсь что содрала отсюда \n    // http://stackoverflow.com/questions/16791940/jquery-ui-spinner-able-to-exceed-max-by-keyboard\n    }).on('input', function () {\n        if ($(this).data('onInputPrevented')) return;\n        var val = this.value,\n            $this = $(this),\n            max = $this.spinner('option', 'max'),\n            min = $this.spinner('option', 'min');\n        // We want only number, no alpha. \n        // We set it to previous default value.         \n        if (!val.match(/^[+-]?[\\d]{0,}$/)) val = $(this).data('defaultValue');\n        this.value = val > max ? max : val < min ? min : val;\n\n        }).on('keydown', function (e) {\n          // we set default value for spinner.\n          if (!$(this).data('defaultValue')) $(this).data('defaultValue', this.value);\n          // To handle backspace\n          $(this).data('onInputPrevented', e.which === 8 ? true : false);\n          });\n    })\n  }\n\n  \n  function publicMethod() {\n    imageHandling = {\n\n        imageLoad: function() {\n          /**\n           * @public\n           * \n           * Определяет положение вотермарка относительно большой картинки (переменная relativePos)\n           * Вызывает imageGrag(), initSpinner() \n           */\n              $('.loaded__watermark').load(function() {\n              relativePos = $('.loaded__image').position();\n              $('.canvas__watermark').css(relativePos);\n\n              imageDrag();\n              initSpinner();\n              });\n        },\n\n        onReset: function() {\n          /**\n         * @public\n         * Вызывается при нажатии на кнопку \"сброс\"\n         * Возвращает вотермарк на 0, делает активной первую кнопку 9-поз блока.\n         * Вызывает changePosition()\n         */\n          var pos = {\n            left: 0,\n            top: 0\n          };\n          changePosition(pos);\n          $('.canvas__item').removeClass('canvas__item_active');\n          $('#left-top').addClass('canvas__item_active');\n        }\n\n    };\n  }\n  \n  return window.imageHandling = imageHandling;\n}());\n\n\n"],"sourceRoot":"/source/"}